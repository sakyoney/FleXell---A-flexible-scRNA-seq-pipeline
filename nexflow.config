/*
========================================================================================
    scRNA-SEQ-Flow Nextflow Configuration
========================================================================================
*/

params {
    // ===== REQUIRED INPUTS =====
    input                  = null                     // CSV file with sample metadata
    outdir                 = './results'              // Output directory

    // ===== PROTOCOL SELECTION =====
    protocol               = '10x'                    // '10x' or 'smartseq2'

    // ===== GENOME SELECTION =====
    genome                 = 'GRCh38'                 // 'GRCh38', 'GRCm39', or 'custom'

    // Custom genome (required if genome = 'custom')
    fasta                  = null
    gtf                    = null

    // ===== 10x GENOMICS PARAMETERS =====
    use_cellranger         = true                     // Use Cell Ranger (true) or STARsolo (false)
    chemistry              = 'auto'                   // Cell Ranger chemistry version
    expect_cells           = 5000                     // Expected number of cells
    cellranger_transcriptome = null                   // Pre-built Cell Ranger transcriptome

    // ===== SMART-SEQ2 PARAMETERS =====
    strandedness           = 'unstranded'             // 'unstranded', 'forward', 'reverse'

    // ===== QUALITY CONTROL =====
    min_genes              = 200                      // Min genes per cell
    max_genes              = 6000                     // Max genes per cell
    min_cells              = 3                        // Min cells per gene
    mt_percent_max         = 20                       // Max mitochondrial content (%)
    doublet_detection      = true                     // Enable doublet detection

    // ===== NORMALIZATION =====
    normalization          = 'scran'                  // 'scran', 'seurat', 'pearson'
    n_top_genes            = 2000                     // Number of highly variable genes
    scale_max_value        = 10                       // Max value for scaling

    // ===== BATCH INTEGRATION =====
    integration_method     = 'harmony'                // 'harmony', 'scanorama', 'bbknn', 'combat', 'none'
    batch_key              = 'sample_id'              // Batch key for integration

    // ===== DIMENSIONALITY REDUCTION =====
    n_pcs                  = 30                       // Number of principal components
    n_neighbors            = 15                       // Number of neighbors for UMAP
    min_dist               = 0.3                      // UMAP min_dist parameter

    // ===== CLUSTERING =====
    clustering_method      = 'leiden'                 // 'leiden' or 'louvain'
    resolution             = 0.8                      // Clustering resolution

    // ===== MARKER DETECTION =====
    marker_method          = 'wilcoxon'               // 't-test', 'wilcoxon', 'logreg'
    min_logfc              = 0.5                      // Min log fold change for markers
    marker_pval            = 0.05                     // P-value cutoff

    // ===== DIFFERENTIAL EXPRESSION =====
    de_method              = 'wilcoxon'               // 't-test', 'wilcoxon', 'logreg'
    de_logfc_threshold     = 0.5                      // Log fold change threshold
    de_pval_cutoff         = 0.05                     // Adjusted p-value cutoff

    // ===== CELL TYPE ANNOTATION =====
    auto_annotate          = true                     // Enable automatic annotation
    annotation_db          = 'celltypist'             // 'celltypist' or 'manual'
    celltypist_model       = 'Immune_All_Low.pkl'     // CellTypist model

    // ===== RESOURCE LIMITS =====
    max_cpus               = 16
    max_memory             = '128.GB'
    max_time               = '48.h'

    // ===== OTHER OPTIONS =====
    publish_dir_mode       = 'copy'                   // 'symlink', 'copy', 'move'
    enable_conda           = false
    singularity_pull_docker_container = false
}

// ===== GENOME CONFIGURATIONS =====
params.genomes {
    'GRCh38' {
        fasta = 's3://ngi-igenomes/igenomes/Homo_sapiens/NCBI/GRCh38/Sequence/WholeGenomeFasta/genome.fa'
        gtf   = 's3://ngi-igenomes/igenomes/Homo_sapiens/NCBI/GRCh38/Annotation/Genes/genes.gtf'
    }
    'GRCm39' {
        fasta = 's3://ngi-igenomes/igenomes/Mus_musculus/NCBI/GRCm39/Sequence/WholeGenomeFasta/genome.fa'
        gtf   = 's3://ngi-igenomes/igenomes/Mus_musculus/NCBI/GRCm39/Annotation/Genes/genes.gtf'
    }
}

// ===== PROFILES =====
profiles {
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        process.container      = 'scrnaseq-flow:latest'
    }

    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false

        process.container      = 'scrnaseq-flow.sif'
    }

    test {
        params.input           = 'assets/test_samplesheet.csv'
        params.genome          = 'GRCh38'
        params.protocol        = '10x'
        params.expect_cells    = 1000
        params.max_cpus        = 4
        params.max_memory      = '16.GB'
    }
}

// ===== PROCESS RESOURCE CONFIGURATION =====
process {
    // Default resources
    cpus   = { check_max(2 * task.attempt, 'cpus') }
    memory = { check_max(8.GB * task.attempt, 'memory') }
    time   = { check_max(4.h * task.attempt, 'time') }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 2
    maxErrors     = '-1'

    // Resource labels
    withLabel: process_low {
        cpus   = { check_max(2 * task.attempt, 'cpus') }
        memory = { check_max(8.GB * task.attempt, 'memory') }
        time   = { check_max(4.h * task.attempt, 'time') }
    }

    withLabel: process_medium {
        cpus   = { check_max(6 * task.attempt, 'cpus') }
        memory = { check_max(32.GB * task.attempt, 'memory') }
        time   = { check_max(8.h * task.attempt, 'time') }
    }

    withLabel: process_high {
        cpus   = { check_max(12 * task.attempt, 'cpus') }
        memory = { check_max(64.GB * task.attempt, 'memory') }
        time   = { check_max(16.h * task.attempt, 'time') }
    }

    withLabel: process_long {
        time   = { check_max(24.h * task.attempt, 'time') }
    }

    withLabel: error_ignore {
        errorStrategy = 'ignore'
    }

    withLabel: error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }
}

// ===== MANIFEST =====
manifest {
    name            = 'scRNA-SEQ-Flow'
    author          = 'scRNA-SEQ-Flow Team'
    homePage        = 'https://github.com/sakyoney/scRNA-SEQ-Flow'
    description     = 'Nextflow pipeline for single-cell RNA-seq analysis supporting 10x Genomics and Smart-seq2'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0.0'
}

// ===== EXECUTION REPORTS =====
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline.html"
}

report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report.html"
}

trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace.txt"
}

dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// ===== FUNCTIONS =====
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.max_cpus as int)
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}